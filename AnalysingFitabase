---Checked for # of participants by counting number of distinct Ids in each dataset
SELECT COUNT (DISTINCT Id) AS Total_Ids 
FROM `capstone-project-120622.fitbit_tracker_data.daily_activity_merged`

---First, I wanted to see how many times each of the users wore/used the FitBit tracker
SELECT Id,
COUNT(Id) AS Total_Id
FROM `capstone-project-120622.fitbit_tracker_data.daily_activity_merged`
GROUP BY Id

---Next, I wanted to breakdown the users by how much they wore their FitBit Fitness Tracker. I created three user types
SELECT Id,
COUNT(Id) AS Total_Logged_Uses,
CASE
WHEN COUNT(Id) BETWEEN 25 AND 31 THEN 'Active User'
WHEN COUNT(Id) BETWEEN 15 and 24 THEN 'Moderate User'
WHEN COUNT(Id) BETWEEN 0 and 14 THEN 'Light User'
END Fitbit_Usage_Type
FROM `capstone-project-120622.fitbit_tracker_data.daily_activity_merged`
GROUP BY Id

---Next, I wanted to take a closer look at the MIN, MAX, & AVG of total steps, total distance, calories and activity levels by Id
SELECT Id,
MIN(TotalSteps) AS Min_Total_Steps,
MAX(TotalSteps) AS Max_Total_Steps, 
AVG(TotalSteps) AS Avg_Total_Stpes,
MIN(TotalDistance) AS Min_Total_Distance, 
MAX(TotalDistance) AS Max_Total_Distance, 
AVG(TotalDistance) AS Avg_Total_Distance,
MIN(Calories) AS Min_Total_Calories,
MAX(Calories) AS Max_Total_Calories,
AVG(Calories) AS Avg_Total_Calories,
MIN(VeryActiveMinutes) AS Min_Very_Active_Minutes,
MAX(VeryActiveMinutes) AS Max_Very_Active_Minutes,
AVG(VeryActiveMinutes) AS Avg_Very_Active_Minutes,
MIN(FairlyActiveMinutes) AS Min_Fairly_Active_Minutes,
MAX(FairlyActiveMinutes) AS Max_Fairly_Active_Minutes,
AVG(FairlyActiveMinutes) AS Avg_Fairly_Active_Minutes,
MIN(LightlyActiveMinutes) AS Min_Lightly_Active_Minutes,
MAX(LightlyActiveMinutes) AS Max_Lightly_Active_Minutes,
AVG(LightlyActiveMinutes) AS Avg_Lightly_Active_Minutes,
MIN(SedentaryMinutes) AS Min_Sedentary_Minutes,
MAX(SedentaryMinutes) AS Max_Sedentary_Minutes,
AVG(SedentaryMinutes) AS Avg_Sedentary_Minutes
From `capstone-project-120622.fitbit_tracker_data.daily_activity_merged`
Group BY Id

---Next I wanted to narrow my results to just the averages of the different types of minutes by Id
SELECT Id, 
avg(VeryActiveMinutes) AS Avg_Very_Active_Minutes,
avg(FairlyActiveMinutes) AS Avg_Fairly_Active_Minutes,
avg(LightlyActiveMinutes) AS Avg_Lightly_Active_Minutes,
avg(SedentaryMinutes) AS Avg_Sedentary_Minutes,
FROM `capstone-project-120622.fitbit_tracker_data.daily_activity_merged`
GROUP BY Id

---Lastly, I wanted to take a look at average active minutes by week day before moving on to user types.
SELECT Activity_Day_,
ROUND (avg(VeryActiveMinutes), 2) AS Avg_Very_Active_Minutes,
ROUND (avg(FairlyActiveMinutes), 2) AS Avg_Fairly_Active_Minutes,
ROUND (avg(LightlyActiveMinutes), 2) AS Avg_Lightly_Active_Minutes,
ROUND (avg(SedentaryMinutes), 2) AS Avg_Sedentary_Minutes,
FROM `capstone-project-120622.fitbit_tracker_data.daily_activity_merged_weekday`
GROUP BY Activity_Day_

---
SELECT Id,
avg(TotalSteps) AS Avg_Total_Steps,
CASE
WHEN avg(TotalSteps) < 5000 THEN 'Inactive'
WHEN avg(TotalSteps) BETWEEN 5000 AND 7499 THEN 'Low Active User'
WHEN avg(TotalSteps) BETWEEN 7500 AND 9999 THEN 'Average Active User'
WHEN avg(TotalSteps) BETWEEN 10000 AND 12499 THEN 'Active User'
WHEN avg(TotalSteps) >= 12500 THEN 'Very Active User'
END User_Type
FROM `capstone-project-120622.fitbit_tracker_data.daily_activity_merged`
GROUP BY Id

---Calories, Steps & Active Minutes by ID
SELECT Id, 
Sum(TotalSteps) AS Sum_total_steps,
SUM(Calories) AS Sum_Calories, 
SUM(VeryActiveMinutes + FairlyActiveMinutes) AS Sum_Active_Minutes
FROM `capstone-project-120622.fitbit_tracker_data.daily_activity_merged`
GROUP BY Id

---Total Steps, Total Distance, Total Calories by Day
SELECT 
DISTINCT Weekday,
AVG(TotalSteps) AS AVG_TotalSteps,
AVG(TotalDistance) AS AVG_TotalDistance,
AVG(Calories) AS AVG_TotalCalories
FROM
  `ggdacapstone.fitbit.dailyActivity`
GROUP BY
Weekday
ORDER BY
AVG_TotalSteps DESC























































